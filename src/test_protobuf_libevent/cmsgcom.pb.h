// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmsgcom.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cmsgcom_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cmsgcom_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "cmsgtype.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cmsgcom_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cmsgcom_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cmsgcom_2eproto;
namespace cmsg {
class CLoginReq;
class CLoginReqDefaultTypeInternal;
extern CLoginReqDefaultTypeInternal _CLoginReq_default_instance_;
class CLoginRes;
class CLoginResDefaultTypeInternal;
extern CLoginResDefaultTypeInternal _CLoginRes_default_instance_;
class CMsgHead;
class CMsgHeadDefaultTypeInternal;
extern CMsgHeadDefaultTypeInternal _CMsgHead_default_instance_;
}  // namespace cmsg
PROTOBUF_NAMESPACE_OPEN
template<> ::cmsg::CLoginReq* Arena::CreateMaybeMessage<::cmsg::CLoginReq>(Arena*);
template<> ::cmsg::CLoginRes* Arena::CreateMaybeMessage<::cmsg::CLoginRes>(Arena*);
template<> ::cmsg::CMsgHead* Arena::CreateMaybeMessage<::cmsg::CMsgHead>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cmsg {

enum CLoginRes_CLoginResType : int {
  CLoginRes_CLoginResType_OK = 0,
  CLoginRes_CLoginResType_ERROR = 1,
  CLoginRes_CLoginResType_NOUSER = 2,
  CLoginRes_CLoginResType_CLoginRes_CLoginResType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CLoginRes_CLoginResType_CLoginRes_CLoginResType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CLoginRes_CLoginResType_IsValid(int value);
constexpr CLoginRes_CLoginResType CLoginRes_CLoginResType_CLoginResType_MIN = CLoginRes_CLoginResType_OK;
constexpr CLoginRes_CLoginResType CLoginRes_CLoginResType_CLoginResType_MAX = CLoginRes_CLoginResType_NOUSER;
constexpr int CLoginRes_CLoginResType_CLoginResType_ARRAYSIZE = CLoginRes_CLoginResType_CLoginResType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CLoginRes_CLoginResType_descriptor();
template<typename T>
inline const std::string& CLoginRes_CLoginResType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CLoginRes_CLoginResType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CLoginRes_CLoginResType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CLoginRes_CLoginResType_descriptor(), enum_t_value);
}
inline bool CLoginRes_CLoginResType_Parse(
    const std::string& name, CLoginRes_CLoginResType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CLoginRes_CLoginResType>(
    CLoginRes_CLoginResType_descriptor(), name, value);
}
// ===================================================================

class CMsgHead :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cmsg.CMsgHead) */ {
 public:
  CMsgHead();
  virtual ~CMsgHead();

  CMsgHead(const CMsgHead& from);
  CMsgHead(CMsgHead&& from) noexcept
    : CMsgHead() {
    *this = ::std::move(from);
  }

  inline CMsgHead& operator=(const CMsgHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgHead& operator=(CMsgHead&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgHead& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgHead* internal_default_instance() {
    return reinterpret_cast<const CMsgHead*>(
               &_CMsgHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgHead& a, CMsgHead& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgHead* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgHead* New() const final {
    return CreateMaybeMessage<CMsgHead>(nullptr);
  }

  CMsgHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgHead>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgHead& from);
  void MergeFrom(const CMsgHead& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgHead* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cmsg.CMsgHead";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cmsgcom_2eproto);
    return ::descriptor_table_cmsgcom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 3,
    kServiceNameFieldNumber = 4,
    kMsgSizeFieldNumber = 1,
    kMsgTypeFieldNumber = 2,
  };
  // string token = 3;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string service_name = 4;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // int32 msg_size = 1;
  void clear_msg_size();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_size() const;
  void set_msg_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .cmsg.CMsgType msg_type = 2;
  void clear_msg_type();
  ::cmsg::CMsgType msg_type() const;
  void set_msg_type(::cmsg::CMsgType value);

  // @@protoc_insertion_point(class_scope:cmsg.CMsgHead)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_size_;
  int msg_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmsgcom_2eproto;
};
// -------------------------------------------------------------------

class CLoginReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cmsg.CLoginReq) */ {
 public:
  CLoginReq();
  virtual ~CLoginReq();

  CLoginReq(const CLoginReq& from);
  CLoginReq(CLoginReq&& from) noexcept
    : CLoginReq() {
    *this = ::std::move(from);
  }

  inline CLoginReq& operator=(const CLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLoginReq& operator=(CLoginReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CLoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLoginReq* internal_default_instance() {
    return reinterpret_cast<const CLoginReq*>(
               &_CLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CLoginReq& a, CLoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CLoginReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CLoginReq* New() const final {
    return CreateMaybeMessage<CLoginReq>(nullptr);
  }

  CLoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CLoginReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CLoginReq& from);
  void MergeFrom(const CLoginReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLoginReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cmsg.CLoginReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cmsgcom_2eproto);
    return ::descriptor_table_cmsgcom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:cmsg.CLoginReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmsgcom_2eproto;
};
// -------------------------------------------------------------------

class CLoginRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cmsg.CLoginRes) */ {
 public:
  CLoginRes();
  virtual ~CLoginRes();

  CLoginRes(const CLoginRes& from);
  CLoginRes(CLoginRes&& from) noexcept
    : CLoginRes() {
    *this = ::std::move(from);
  }

  inline CLoginRes& operator=(const CLoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLoginRes& operator=(CLoginRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CLoginRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLoginRes* internal_default_instance() {
    return reinterpret_cast<const CLoginRes*>(
               &_CLoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CLoginRes& a, CLoginRes& b) {
    a.Swap(&b);
  }
  inline void Swap(CLoginRes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CLoginRes* New() const final {
    return CreateMaybeMessage<CLoginRes>(nullptr);
  }

  CLoginRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CLoginRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CLoginRes& from);
  void MergeFrom(const CLoginRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLoginRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cmsg.CLoginRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cmsgcom_2eproto);
    return ::descriptor_table_cmsgcom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CLoginRes_CLoginResType CLoginResType;
  static constexpr CLoginResType OK =
    CLoginRes_CLoginResType_OK;
  static constexpr CLoginResType ERROR =
    CLoginRes_CLoginResType_ERROR;
  static constexpr CLoginResType NOUSER =
    CLoginRes_CLoginResType_NOUSER;
  static inline bool CLoginResType_IsValid(int value) {
    return CLoginRes_CLoginResType_IsValid(value);
  }
  static constexpr CLoginResType CLoginResType_MIN =
    CLoginRes_CLoginResType_CLoginResType_MIN;
  static constexpr CLoginResType CLoginResType_MAX =
    CLoginRes_CLoginResType_CLoginResType_MAX;
  static constexpr int CLoginResType_ARRAYSIZE =
    CLoginRes_CLoginResType_CLoginResType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CLoginResType_descriptor() {
    return CLoginRes_CLoginResType_descriptor();
  }
  template<typename T>
  static inline const std::string& CLoginResType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CLoginResType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CLoginResType_Name.");
    return CLoginRes_CLoginResType_Name(enum_t_value);
  }
  static inline bool CLoginResType_Parse(const std::string& name,
      CLoginResType* value) {
    return CLoginRes_CLoginResType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kResFieldNumber = 1,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .cmsg.CLoginRes.CLoginResType res = 1;
  void clear_res();
  ::cmsg::CLoginRes_CLoginResType res() const;
  void set_res(::cmsg::CLoginRes_CLoginResType value);

  // @@protoc_insertion_point(class_scope:cmsg.CLoginRes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  int res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmsgcom_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgHead

// int32 msg_size = 1;
inline void CMsgHead::clear_msg_size() {
  msg_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgHead::msg_size() const {
  // @@protoc_insertion_point(field_get:cmsg.CMsgHead.msg_size)
  return msg_size_;
}
inline void CMsgHead::set_msg_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_size_ = value;
  // @@protoc_insertion_point(field_set:cmsg.CMsgHead.msg_size)
}

// .cmsg.CMsgType msg_type = 2;
inline void CMsgHead::clear_msg_type() {
  msg_type_ = 0;
}
inline ::cmsg::CMsgType CMsgHead::msg_type() const {
  // @@protoc_insertion_point(field_get:cmsg.CMsgHead.msg_type)
  return static_cast< ::cmsg::CMsgType >(msg_type_);
}
inline void CMsgHead::set_msg_type(::cmsg::CMsgType value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:cmsg.CMsgHead.msg_type)
}

// string token = 3;
inline void CMsgHead::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMsgHead::token() const {
  // @@protoc_insertion_point(field_get:cmsg.CMsgHead.token)
  return _internal_token();
}
inline void CMsgHead::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:cmsg.CMsgHead.token)
}
inline std::string* CMsgHead::mutable_token() {
  // @@protoc_insertion_point(field_mutable:cmsg.CMsgHead.token)
  return _internal_mutable_token();
}
inline const std::string& CMsgHead::_internal_token() const {
  return token_.GetNoArena();
}
inline void CMsgHead::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CMsgHead::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmsg.CMsgHead.token)
}
inline void CMsgHead::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmsg.CMsgHead.token)
}
inline void CMsgHead::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmsg.CMsgHead.token)
}
inline std::string* CMsgHead::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMsgHead::release_token() {
  // @@protoc_insertion_point(field_release:cmsg.CMsgHead.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgHead::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:cmsg.CMsgHead.token)
}

// string service_name = 4;
inline void CMsgHead::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMsgHead::service_name() const {
  // @@protoc_insertion_point(field_get:cmsg.CMsgHead.service_name)
  return _internal_service_name();
}
inline void CMsgHead::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:cmsg.CMsgHead.service_name)
}
inline std::string* CMsgHead::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:cmsg.CMsgHead.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& CMsgHead::_internal_service_name() const {
  return service_name_.GetNoArena();
}
inline void CMsgHead::_internal_set_service_name(const std::string& value) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CMsgHead::set_service_name(std::string&& value) {
  
  service_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmsg.CMsgHead.service_name)
}
inline void CMsgHead::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmsg.CMsgHead.service_name)
}
inline void CMsgHead::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmsg.CMsgHead.service_name)
}
inline std::string* CMsgHead::_internal_mutable_service_name() {
  
  return service_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMsgHead::release_service_name() {
  // @@protoc_insertion_point(field_release:cmsg.CMsgHead.service_name)
  
  return service_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgHead::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:cmsg.CMsgHead.service_name)
}

// -------------------------------------------------------------------

// CLoginReq

// string username = 1;
inline void CLoginReq::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CLoginReq::username() const {
  // @@protoc_insertion_point(field_get:cmsg.CLoginReq.username)
  return _internal_username();
}
inline void CLoginReq::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:cmsg.CLoginReq.username)
}
inline std::string* CLoginReq::mutable_username() {
  // @@protoc_insertion_point(field_mutable:cmsg.CLoginReq.username)
  return _internal_mutable_username();
}
inline const std::string& CLoginReq::_internal_username() const {
  return username_.GetNoArena();
}
inline void CLoginReq::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CLoginReq::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmsg.CLoginReq.username)
}
inline void CLoginReq::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmsg.CLoginReq.username)
}
inline void CLoginReq::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmsg.CLoginReq.username)
}
inline std::string* CLoginReq::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CLoginReq::release_username() {
  // @@protoc_insertion_point(field_release:cmsg.CLoginReq.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CLoginReq::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:cmsg.CLoginReq.username)
}

// string password = 2;
inline void CLoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CLoginReq::password() const {
  // @@protoc_insertion_point(field_get:cmsg.CLoginReq.password)
  return _internal_password();
}
inline void CLoginReq::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:cmsg.CLoginReq.password)
}
inline std::string* CLoginReq::mutable_password() {
  // @@protoc_insertion_point(field_mutable:cmsg.CLoginReq.password)
  return _internal_mutable_password();
}
inline const std::string& CLoginReq::_internal_password() const {
  return password_.GetNoArena();
}
inline void CLoginReq::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CLoginReq::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmsg.CLoginReq.password)
}
inline void CLoginReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmsg.CLoginReq.password)
}
inline void CLoginReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmsg.CLoginReq.password)
}
inline std::string* CLoginReq::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CLoginReq::release_password() {
  // @@protoc_insertion_point(field_release:cmsg.CLoginReq.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CLoginReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:cmsg.CLoginReq.password)
}

// -------------------------------------------------------------------

// CLoginRes

// .cmsg.CLoginRes.CLoginResType res = 1;
inline void CLoginRes::clear_res() {
  res_ = 0;
}
inline ::cmsg::CLoginRes_CLoginResType CLoginRes::res() const {
  // @@protoc_insertion_point(field_get:cmsg.CLoginRes.res)
  return static_cast< ::cmsg::CLoginRes_CLoginResType >(res_);
}
inline void CLoginRes::set_res(::cmsg::CLoginRes_CLoginResType value) {
  
  res_ = value;
  // @@protoc_insertion_point(field_set:cmsg.CLoginRes.res)
}

// string token = 2;
inline void CLoginRes::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CLoginRes::token() const {
  // @@protoc_insertion_point(field_get:cmsg.CLoginRes.token)
  return _internal_token();
}
inline void CLoginRes::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:cmsg.CLoginRes.token)
}
inline std::string* CLoginRes::mutable_token() {
  // @@protoc_insertion_point(field_mutable:cmsg.CLoginRes.token)
  return _internal_mutable_token();
}
inline const std::string& CLoginRes::_internal_token() const {
  return token_.GetNoArena();
}
inline void CLoginRes::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CLoginRes::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cmsg.CLoginRes.token)
}
inline void CLoginRes::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cmsg.CLoginRes.token)
}
inline void CLoginRes::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cmsg.CLoginRes.token)
}
inline std::string* CLoginRes::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CLoginRes::release_token() {
  // @@protoc_insertion_point(field_release:cmsg.CLoginRes.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CLoginRes::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:cmsg.CLoginRes.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cmsg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::cmsg::CLoginRes_CLoginResType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cmsg::CLoginRes_CLoginResType>() {
  return ::cmsg::CLoginRes_CLoginResType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cmsgcom_2eproto
